#
# (C) Copyright Resse Christophe 2021 - All Rights Reserved
# -----------------------------------------------------------------------------------------------
# All information contained herein is, and remains the property of
# Resse Christophe. and its suppliers, if any. The intellectual and technical
# concepts contained herein are proprietary to Resse C. and its
# suppliers and may be covered by U.S. and Foreign Patents, patents
# in process, and are protected by trade secret or copyright law.
#
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained from
# Resse Christophe (christophe.resse@gmail.com).
# -----------------------------------------------------------------------------------------------
#

server.port = 8089


#
# Spring Data Source properties
# -----------------------------
#
# H2 server mode
spring.datasource.url = jdbc:h2:tcp://localhost:@db.h2.port@/@db.h2.name@;DB_CLOSE_ON_EXIT=TRUE
spring.datasource.username = @db.h2.user@
spring.datasource.password = @db.h2.password@

spring.jpa.properties.hibernate.default_schema = @db.h2.schemas@

#
# Possible values: create, create-drop, validate, update, none
# ----------------------------------------------------------------------------------------------------------------------
# - create     : Hibernate first drops existing tables, then creates new tables.
#
# - create-drop: Similar to create, with the addition that Hibernate will drop the database after all operations are
#                completed. Typically used for unit testing.
#                Typically in test case scenarios, you'll likely use 'create-drop' so that you create your schema,
#                your test case adds some mock data, you run your tests, and then during the test case cleanup, the
#                schema objects are dropped, leaving an empty database.
#
# - update     : The object model created based on the mappings (annotations or XML) is compared with the existing
#                schema, and then Hibernate updates the schema according to the diff. It never deletes the existing
#                tables or columns even if they are no more required by the application.
#                The update operation for example will attempt to add new columns, constraints, etc but will never
#                remove a column or constraint that may have existed previously but no longer does as part of the
#                object model from a prior run.
#                In development, it's often common to see developers use update to automatically modify the schema to
#                add new additions upon restart. But again understand, this does not remove a column or constraint that
#                may exist from previous executions that is no longer necessary.
#
# - validate   : Hibernate only validates whether the tables and columns exist, otherwise it throws an exception.
#
# - none       : In production, it's often highly recommended you use none or simply don't specify this property. That
#                is because it's common practice for DBAs to review migration scripts for database changes,
#                particularly if your database is shared across multiple services and applications.
#
spring.jpa.hibernate.ddl-auto = @spring.jpa.hibernate.ddl-auto@

#
# Possible values: always, never, embedded
# ----------------------------------------------------------------------------------------------------------------------
#
# - always   : Always initialize the datasource (schema).
# - never    : Never initialize the datasource (schema).
# - embedded : Only initialize an embedded datasource.
#
spring.batch.initialize-schema = @spring.batch.initialize-schema@


