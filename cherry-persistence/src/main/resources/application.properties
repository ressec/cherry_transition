#
# (C) Copyright Resse Christophe 2021 - All Rights Reserved
# -----------------------------------------------------------------------------------------------
# All information contained herein is, and remains the property of
# Resse Christophe. and its suppliers, if any. The intellectual and technical
# concepts contained herein are proprietary to Resse C. and its
# suppliers and may be covered by U.S. and Foreign Patents, patents
# in process, and are protected by trade secret or copyright law.
#
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained from
# Resse Christophe (christophe.resse@gmail.com).
# -----------------------------------------------------------------------------------------------
#

#
# Spring properties
# -----------------
#
spring.profiles.active = @spring.profiles.active@
server.port = 8083
server.error.include-message = always

#
# Logging properties
# ------------------
#
logging.level.root = INFO
logging.level.org.hibernate = INFO
logging.level.org.springframework = INFO

#
# Spring IoC properties
# ---------------------
#
spring.main.allow-bean-definition-overriding = true

#
# Spring Data Source properties
# -----------------------------
#
# H2 server mode
spring.datasource.url = jdbc:h2:tcp://localhost:9092/HEMAJOO;DB_CLOSE_ON_EXIT=TRUE
spring.datasource.driverClassName = org.h2.Driver
spring.datasource.username = sa
spring.datasource.password = password

#
# Spring JPA Hibernate properties
# -------------------------------
#
spring.jpa.hibernate.database-platform = org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.show-sql = false
spring.jpa.hibernate.properties.javax.persistence.validation.mode = none
spring.jpa.properties.hibernate.default_schema = TEST
spring.jpa.generate-ddl = true

#
# Possible values: create, create-drop, validate, update, none
# ----------------------------------------------------------------------------------------------------------------------
# - create     : Hibernate first drops existing tables, then creates new tables.
#
# - create-drop: Similar to create, with the addition that Hibernate will drop the database after all operations are
#                completed. Typically used for unit testing.
#                Typically in test case scenarios, you'll likely use 'create-drop' so that you create your schema,
#                your test case adds some mock data, you run your tests, and then during the test case cleanup, the
#                schema objects are dropped, leaving an empty database.
#
# - update     : The object model created based on the mappings (annotations or XML) is compared with the existing
#                schema, and then Hibernate updates the schema according to the diff. It never deletes the existing
#                tables or columns even if they are no more required by the application.
#                The update operation for example will attempt to add new columns, constraints, etc but will never
#                remove a column or constraint that may have existed previously but no longer does as part of the
#                object model from a prior run.
#                In development, it's often common to see developers use update to automatically modify the schema to
#                add new additions upon restart. But again understand, this does not remove a column or constraint that
#                may exist from previous executions that is no longer necessary.
#
# - validate   : Hibernate only validates whether the tables and columns exist, otherwise it throws an exception.
#
# - none       : In production, it's often highly recommended you use none or simply don't specify this property. That
#                is because it's common practice for DBAs to review migration scripts for database changes,
#                particularly if your database is shared across multiple services and applications.
#
spring.jpa.hibernate.ddl-auto = update

#
# Possible values: always, never, embedded
# ----------------------------------------------------------------------------------------------------------------------
#
# - always   : Always initialize the datasource (schema).
# - never    : Never initialize the datasource (schema).
# - embedded : Only initialize an embedded datasource.
#
spring.batch.initialize-schema = always

#
# Spring Servlet properties
# -------------------------
#
spring.servlet.multipart.max-file-size = 1MB
spring.servlet.multipart.max-request-size = 1MB

#
# Flyway properties
# -----------------
#
flyway.enabled = true
spring.flyway.enabled = false
#spring.flyway.locations=filesystem:./db/migration/h2
spring.flyway.locations = classpath:db/migration/h2
spring.flyway.sql-migration-prefix = V
spring.flyway.repeatable-sql-migration-prefix = R
spring.flyway.sql-migration-separator = __
spring.flyway.sql-migration-suffixes = .sql


spring.content.rest.fullyQualifiedLinks = true


#
# Cherry content store properties
#
hemajoo.commerce.cherry.store.location = ./target/content-store

#
# Swagger properties
#
app.api.swagger.enable = true

app.name = Cherry
app.api.title = Hemajoo's Commerce Cherry REST APIs
app.api.version = 0.1.0
app.api.description = Set of controllers with REST APIs to interact with the Cherry backend system.
app.api.base-package = com.hemajoo.commerce.cherry.rest.controller
app.api.contact-name = Resse Christophe
app.api.contact-email = christophe.resse@gmail.com
