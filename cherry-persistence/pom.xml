<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.hemajoo.commerce.cherry</groupId>
        <artifactId>cherry-parent</artifactId>
        <version>0.1.0-SNAPSHOT</version>
        <relativePath>../cherry-parent</relativePath>
    </parent>

    <artifactId>cherry-persistence</artifactId>

    <name>Cherry - Persistence</name>
    <description>Module providing the persistence layer of the Cherry solution.</description>

    <dependencies>

        <!-- Spring dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Spring Content dependencies -->
        <!-- Spring Content: Allow to expose JPA repositories as REST controllers -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>

        <!-- Spring Content: File System support -->
        <dependency>
            <groupId>com.github.paulcwarren</groupId>
            <artifactId>spring-content-fs-boot-starter</artifactId>
        </dependency>

        <!-- Tip: Allow to expose JPA repositories as REST controllers -->
        <dependency>
            <groupId>com.github.paulcwarren</groupId>
            <artifactId>spring-content-rest-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter -->
        <!-- Provides everything you need to write JUnit 5 Jupiter tests. -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${version.junit.jupiter}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Flyway dependencies -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
        </dependency>

        <!-- Bean mapper: MapStruct -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
        </dependency>

        <!-- Lombok annotation processing for MapStruct -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok-mapstruct-binding</artifactId>
        </dependency>

        <!-- Lombok Core -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.javers</groupId>
            <artifactId>javers-core</artifactId>
        </dependency>

        <!-- Hemajoo Cherry - Common: https://github.com/ressec/Cherry
             Hemajoo's Commerce Cherry common entities.
          -->
        <dependency>
            <groupId>com.hemajoo.commerce.cherry</groupId>
            <artifactId>cherry-commons</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <!-- Hemajoo Cherry - Data Model: https://github.com/ressec/Cherry
             Hemajoo's Commerce Cherry shared data model.
          -->
        <dependency>
            <groupId>com.hemajoo.commerce.cherry</groupId>
            <artifactId>cherry-model</artifactId>
            <version>${project.version}</version>
<!--            <scope>compile</scope>-->
        </dependency>

        <!-- Avocado: https://github.com/ressec/Avocado
             General purpose library providing low level entities.
          -->
        <dependency>
            <groupId>org.ressec</groupId>
            <artifactId>avocado-core</artifactId>
        </dependency>

        <!-- Apache Tika: https://tika.apache.org
             Apache Tika is a content detection and analysis framework, written in Java, stewarded at the Apache Software Foundation. It detects
             and extracts metadata and text from over a thousand different file types, and as well as providing a Java library, has server and
             command-line editions suitable for use from other programming languages.
          -->
        <dependency>
            <groupId>com.github.lafa.tikaNoExternal</groupId>
            <artifactId>tika-core</artifactId>
        </dependency>

        <dependency>
            <groupId>commons-validator</groupId>
            <artifactId>commons-validator</artifactId>
        </dependency>

    </dependencies>

    <build>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>

            <!-- Allow resource filtering for variable substitution -->
            <resource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

    </build>

<!--    <profiles>-->

<!--        <profile>-->
<!--            &lt;!&ndash; Note: This profile is used for the integration tests &ndash;&gt;-->
<!--            <id>integration-tests</id>-->
<!--            <properties>-->
<!--                <db.h2.name>HEMAJOO</db.h2.name>-->
<!--                <db.h2.schemas>TEST</db.h2.schemas>-->
<!--                <db.h2.port>9093</db.h2.port>-->
<!--                <db.h2.user>sa</db.h2.user>-->
<!--                <db.h2.password></db.h2.password>-->
<!--                <spring.jpa.hibernate.ddl-auto>create</spring.jpa.hibernate.ddl-auto>-->
<!--                <spring.profiles.active>integration</spring.profiles.active>-->
<!--                <spring.batch.initialize-schema>auto</spring.batch.initialize-schema>-->
<!--            </properties>-->
<!--            <build>-->
<!--                <plugins>-->

<!--                    <plugin>-->
<!--                        <groupId>org.flywaydb</groupId>-->
<!--                        <artifactId>flyway-maven-plugin</artifactId>-->
<!--                        <version>${version.maven.plugin.flyway}</version>-->
<!--                        <executions>-->
<!--                            &lt;!&ndash; Do not issue a flyway:info when integration-tests profile is active &ndash;&gt;-->
<!--                            <execution>-->
<!--                                <id>flyway-check-db</id>-->
<!--                                <phase>none</phase>-->
<!--                                <goals>-->
<!--                                    <goal>info</goal>-->
<!--                                </goals>-->
<!--                            </execution>-->
<!--                            <execution>-->
<!--                                <id>test-flyway-prepare-db</id>-->
<!--                                <phase>integration-test</phase>-->
<!--                                <goals>-->
<!--                                    <goal>migrate</goal>-->
<!--                                </goals>-->
<!--                                <configuration>-->
<!--                                    <user>${db.h2.user}</user>-->
<!--                                    <password>${db.h2.password}</password>-->
<!--                                    <schemas>-->
<!--                                        <schema>${db.h2.schemas}</schema>-->
<!--                                    </schemas>-->
<!--                                    <url>jdbc:h2:tcp://localhost:${db.h2.port}/${db.h2.name};DB_CLOSE_ON_EXIT=TRUE</url>-->
<!--                                    <locations>${flyway.locations}</locations>-->
<!--                                </configuration>-->
<!--                            </execution>-->
<!--                        </executions>-->
<!--                    </plugin>-->

<!--                    &lt;!&ndash; SUREFIRE: The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application. &ndash;&gt;-->
<!--                    <plugin>-->
<!--                        <groupId>org.apache.maven.plugins</groupId>-->
<!--                        <artifactId>maven-surefire-plugin</artifactId>-->
<!--                        <version>${version.maven.plugin.surefire}</version>-->
<!--                        <configuration>-->
<!--                            <skipTests>false</skipTests>-->
<!--                        </configuration>-->
<!--                        <executions>-->
<!--                            <execution>-->
<!--                                <id>integration-test-h2</id> &lt;!&ndash; Integration tests for H2  &ndash;&gt;-->
<!--                                <phase>integration-test</phase>-->
<!--                                <goals>-->
<!--                                    <goal>test</goal>-->
<!--                                </goals>-->
<!--                                <configuration>-->
<!--                                    <skipTests>false</skipTests>-->
<!--                                    &lt;!&ndash; Include all integration test classes, the ones ending with: IntegrationTest &ndash;&gt;-->
<!--                                    <includes>-->
<!--                                        <include>${test.pattern.integration}</include>-->
<!--                                    </includes>-->
<!--                                    &lt;!&ndash; Exclude all unit test classes, the ones ending with: UnitTest &ndash;&gt;-->
<!--                                    <excludes>-->
<!--                                        <exclude>${test.pattern.unit}</exclude>-->
<!--                                    </excludes>-->
<!--                                </configuration>-->
<!--                            </execution>-->
<!--                        </executions>-->
<!--                    </plugin>-->

<!--                    <plugin>-->
<!--                        <groupId>io.fabric8</groupId>-->
<!--                        <artifactId>docker-maven-plugin</artifactId>-->
<!--                        <version>${version.plugin.maven.docker}</version>-->
<!--                        &lt;!&ndash; Build an h2 Docker image for the integration tests. &ndash;&gt;-->
<!--                        <configuration>-->
<!--                            <images>-->
<!--                                <image>-->
<!--                                    <name>nemerosa/h2:latest</name>-->
<!--                                    <alias>h2-integration</alias>-->
<!--                                    <run>-->
<!--                                        <env>-->
<!--                                            <name>nemerosa-test-h2</name>-->
<!--                                        </env>-->
<!--                                        <ports>-->
<!--                                            &lt;!&ndash; Must not conflict with other h2 instance deployed! &ndash;&gt;-->
<!--                                            <port>${db.h2.port}:9082</port>-->
<!--                                        </ports>-->
<!--                                        <wait>-->
<!--                                            <time>1000</time>-->
<!--                                        </wait>-->
<!--                                    </run>-->
<!--                                </image>-->
<!--                            </images>-->
<!--                        </configuration>-->
<!--                        <executions>-->
<!--                            <execution>-->
<!--                                <id>docker-h2-start-container</id>-->
<!--                                <phase>pre-integration-test</phase>-->
<!--                                <goals>-->
<!--                                    <goal>build</goal>-->
<!--                                    <goal>start</goal>-->
<!--                                </goals>-->
<!--                            </execution>-->
<!--                            <execution>-->
<!--                                <id>docker-h2-stop-container</id>-->
<!--                                <phase>post-integration-test</phase>-->
<!--                                <goals>-->
<!--                                    <goal>stop</goal>-->
<!--                                </goals>-->
<!--                            </execution>-->
<!--                        </executions>-->
<!--                    </plugin>-->

<!--                </plugins>-->
<!--            </build>-->
<!--        </profile>-->

<!--    </profiles>-->

</project>
